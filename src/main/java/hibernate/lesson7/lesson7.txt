lombok:
    @GeneratedValue - used in conjunction with the @Id annotation to mark a field as an identifier or primary key in a JPA entity.
        -AUTO(default): the persistence provider will determine values based on the type of the primary key attribute. This type can be numerical or UUID.
        -IDENTITY:values generated by an identity column in the database. This means they are auto-incremented.
        -SEQUENCE:persistence provider must assign primary key values using a database sequence.

            @SequenceGenerator(name = "book_sequence", sequenceName = "book_sequence", allocationSize = 1)
            public class Book {
                @Id
                @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "book_sequence")
                private Long id;
        -TABLE:persistence provider must assign primary key values using a database table to ensure uniqueness.

            @TableGenerator(name = "book_table", table = "id_generator", pkColumnName = "sequence_name", valueColumnName = "next_val", allocationSize = 1)
            public class Book {
                @Id
                @GeneratedValue(strategy = GenerationType.TABLE, generator = "book_table")
                private Long id;

    @OneToOne(mappedBy = "passport", cascade = CascadeType.ALL, fetch = FetchType.LAZY):
        -mappedBy signals hibernate that the key for the relationship is on the other side.
            -mappedBy indicates the owning side
            -joinColumn indicates the non-owning side

        -CascadeType:It determines whether the state changes in one entity should propagate to associated entities.
            PERSIST:  If you persist an entity, associated entities will also be persisted.

            MERGE: If you merge an entity, associated entities will also be merged.

            REMOVE: If you remove an entity, associated entities will also be removed.

            REFRESH:  If you refresh an entity, associated entities will also be refreshed.

            ALL: any operation performed on the parent entity will be automatically propagated to all child entities.

        -FetchType:define how data should be fetched from the database when querying entities.
            EAGER: when you fetch an entity, its associated entities are also fetched immediately.
            LAZY:  associated entities are not loaded until you explicitly request them.
    @EqualsAndHashCode - is used to automatically generate equals() and hashCode() methods for a class.
        onlyExplicitlyIncluded = true means that only the fields marked with @EqualsAndHashCode.Include will be used in the generated equals() and hashCode() methods.
Associations in JPA (relationship):
    @OneToOne - Unidirectional:
        Only one entity (the owning side) has a reference to the other.
        The target entity (the non-owning side) is not aware of the relationship.

    @OneToOne - Bidirectional:
        Both entities are aware of the relationship.
        This is achieved by having a reference to the other entity on both sides.

    @ManyToOne - Unidirectional:
        Many instances of the owning entity class are associated with one instance of the referenced entity class.
        Only one side of the association has a reference to the other.
             @JoinColumn is used to specify the column in the table of the owning entity that maps to the primary key of the referenced entity.
     @OneToMany - Bidirectional:
            One instance of an entity is associated with a collection of instances of another entity.
            Both sides of the association have references to each other.
     @OneToMany - Unidirectional:
        One instance of an entity is associated with a collection of instances of another entity.
        One side of the association has a reference to the other.
    @ManyToOne - Bidirectional:
        Many instances of one entity are associated with exactly one instance of another entity.
        Both sides of the association have references to each other.
    @ManyToMany - Unidirectional:
        Many instances of one entity are associated with many instances of another entity
        Only one side of the association has a reference to the other.
    @ManyToMany - Bidirectional:
        Many instances of one entity are associated with many instances of another entity.
        Both sides of the association have references to each other.